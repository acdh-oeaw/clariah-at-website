---
import { isNonEmptyArray } from "@acdh-oeaw/lib";
import { Image } from "astro:assets";

import LinkButton from "@/components/content/link-button.astro";
import MainContent from "@/components/main-content.astro";
import PageCard from "@/components/page-card.astro";
import PageSection from "@/components/page-section.astro";
import PageTitle from "@/components/page-title.astro";
import { locales } from "@/config/i18n.config";
import PageLayout from "@/layouts/page-layout.astro";
import { getImageImport } from "@/lib/get-image-import";
import { createI18n } from "@/lib/i18n";
import { createCollectionResource } from "@/lib/keystatic/resources";

export async function getStaticPaths() {
	return (
		await Promise.all(
			locales.map(async (locale) => {
				const pages = await createCollectionResource("projects", locale).all();

				return pages.map((page) => {
					return { params: { id: page.id, locale }, props: { page } };
				});
			}),
		)
	).flat();
}

const { locale } = Astro.params;

const { page } = Astro.props;

const { t } = await createI18n(locale);

const dateTime = new Intl.DateTimeFormat([locale], { dateStyle: "long" });
const list = new Intl.ListFormat([locale]);

const {
	content,
	endDate: _endDate,
	image,
	startDate: _startDate,
	title,
	additionalImages,
	attachments,
	hostingOrganizations,
	links,
	responsiblePersons,
} = page.data;
const documentTitle = title;
const startDate = _startDate != null ? new Date(_startDate) : undefined;
const endDate = _endDate != null ? new Date(_endDate) : undefined;
const { default: Content } = await page.compile(content);
---

<PageLayout locale={locale} title={documentTitle}>
	<MainContent>
		<PageSection>
			<PageCard image={image}>
				<PageTitle>{title}</PageTitle>
				<dl class="grid gap-y-3 py-4">
					{
						isNonEmptyArray(hostingOrganizations) ? (
							<div class="grid gap-y-1 text-sm">
								<dt class="text-xs font-medium uppercase tracking-wider text-neutral-600">
									{t("ProjectPage.hosting-organisations")}
								</dt>
								<dd>{list.format(hostingOrganizations)}</dd>
							</div>
						) : null
					}
					{
						isNonEmptyArray(responsiblePersons) ? (
							<div class="grid gap-y-1 text-sm">
								<dt class="text-xs font-medium uppercase tracking-wider text-neutral-600">
									{t("ProjectPage.responsible-persons")}
								</dt>
								<dd>{list.format(responsiblePersons)}</dd>
							</div>
						) : null
					}
					{
						startDate != null ? (
							<div class="grid gap-y-1 text-sm">
								<dt class="text-xs font-medium uppercase tracking-wider text-neutral-600">
									{t("ProjectPage.start-date")}
								</dt>
								<dd>
									<time datetime={startDate.toISOString()}>{dateTime.format(startDate)}</time>
								</dd>
							</div>
						) : null
					}
					{
						endDate != null ? (
							<div class="grid gap-y-1 text-sm">
								<dt class="text-xs font-medium uppercase tracking-wider text-neutral-600">
									{t("ProjectPage.end-date")}
								</dt>
								<dd>
									<time datetime={endDate.toISOString()}>{dateTime.format(endDate)}</time>
								</dd>
							</div>
						) : null
					}
				</dl>

				<div class="prose">
					<Content />
				</div>

				<div class="grid gap-y-8 py-4">
					{
						isNonEmptyArray(attachments) ? (
							<section class="grid gap-y-4">
								<h2 class="border-b pb-2 text-xl font-bold">{t("ProjectPage.attachments")}</h2>
								<ul class="grid gap-y-2" role="list">
									{attachments.map((attachment) => {
										return (
											<li>
												<a class="font-medium underline" download href={attachment.file}>
													{attachment.label}
												</a>
											</li>
										);
									})}
								</ul>
							</section>
						) : null
					}

					{
						isNonEmptyArray(links) ? (
							<section class="grid gap-y-4">
								<h2 class="border-b pb-2 text-xl font-bold">{t("ProjectPage.links")}</h2>
								<ul class="grid gap-y-2" role="list">
									{links.map((link) => {
										return (
											<li>
												<a class="font-medium underline" download href={link.url}>
													{link.label}
												</a>
											</li>
										);
									})}
								</ul>
							</section>
						) : null
					}

					{
						isNonEmptyArray(additionalImages) ? (
							<section class="grid gap-y-4">
								<h2 class="border-b pb-2 text-xl font-bold">
									{t("ProjectPage.additional-images")}
								</h2>
								<ul class="grid gap-4 md:grid-cols-2" role="list">
									{additionalImages.map((image) => {
										return (
											<li>
												<figure>
													<Image alt={image.alt} src={getImageImport(image.image)} />
													<figcaption>{image.license}</figcaption>
												</figure>
											</li>
										);
									})}
								</ul>
							</section>
						) : null
					}
				</div>

				<div class="mt-8 flex items-center gap-x-4">
					<LinkButton
						label={t("ProjectPage.more.clariah-at-projects")}
						link={{ discriminant: "pages", value: "project-funding" }}
					/>

					<LinkButton
						label={t("ProjectPage.more.dha-projects")}
						link={{ discriminant: "pages", value: "projects" }}
					/>
				</div>
			</PageCard>
		</PageSection>
	</MainContent>
</PageLayout>
