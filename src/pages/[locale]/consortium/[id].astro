---
import { isNonEmptyArray } from "@acdh-oeaw/lib";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

import MainContent from "@/components/main-content.astro";
import PageCard from "@/components/page-card.astro";
import PageSection from "@/components/page-section.astro";
import PageTitle from "@/components/page-title.astro";
import SectionTitle from "@/components/section-title.astro";
import { type Locale, locales } from "@/config/i18n.config";
import PageLayout from "@/layouts/page-layout.astro";
import { createClient } from "@/lib/content/create-client";
import { getImageImport } from "@/lib/get-image-import";
import { createI18n } from "@/lib/i18n";

export async function getStaticPaths() {
	return (
		await Promise.all(
			locales.map(async (locale) => {
				const client = await createClient(locale);
				const pages = await client.getConsortiumMembers();

				return pages.map((page) => {
					return { params: { id: page.id, locale }, props: { page } };
				});
			}),
		)
	).flat();
}

const { locale } = Astro.params;

const { page } = Astro.props;

const { t } = await createI18n(Astro.currentLocale as Locale | undefined);

const { description, href, institutions, logo, name, people } = page.data;
const documentTitle = name;
const { default: Content } = await page.compile(description);

const icons = {
	bluesky: { label: "Bluesky", icon: "simple-icons:bluesky" },
	facebook: {
		label: "Facebook",
		icon: "simple-icons:facebook",
	},
	instagram: {
		label: "Instagram",
		icon: "simple-icons:instagram",
	},
	linkedin: {
		label: "LinkedIn",
		icon: "simple-icons:linkedin",
	},
	mastodon: {
		label: "Mastodon",
		icon: "simple-icons:mastodon",
	},
	orcid: { label: "ORCID", icon: "simple-icons:orcid" },
	podcast: { label: "Podcast", icon: "lucide:podcast" },
	twitter: { label: "Twitter", icon: "simple-icons:x" },
	website: { label: "Website", icon: "lucide:globe" },
	youtube: { label: "YouTube", icon: "simple-icons:youtube" },
};
---

<PageLayout locale={locale} title={documentTitle}>
	<MainContent>
		<PageSection>
			<PageCard>
				<div class="flex justify-center">
					<Image
						alt=""
						class="my-12 h-40 object-contain"
						sizes="1088px"
						src={getImageImport(logo)}
						widths={[1088]}
					/>
				</div>

				<PageTitle>
					<a href={href}>{name}</a>
				</PageTitle>

				<div class="prose">
					<Content />
				</div>

				{
					institutions.length > 0 || people.length > 0 ? (
						<div class="grid gap-y-8 py-8">
							{institutions.length > 0 ? (
								<section class="grid gap-y-8">
									<SectionTitle>{t("ConsortiumMemberPage.institutions")}</SectionTitle>
									<ul class="flex flex-wrap gap-12" role="list">
										{institutions.map((institution) => {
											return (
												<li>
													<article>
														<h3 class="text-lg font-medium">
															<a class="grid gap-y-4" href={institution.href}>
																<Image
																	alt=""
																	class="h-20 w-auto object-contain"
																	src={getImageImport(institution.logo)}
																/>
																{institution.name}
															</a>
														</h3>
													</article>
												</li>
											);
										})}
									</ul>
								</section>
							) : null}

							{people.length > 0 ? (
								<section class="grid gap-y-8">
									<SectionTitle>{t("ConsortiumMemberPage.people")}</SectionTitle>
									<ul class="grid gap-12" role="list">
										{people.map(async (person) => {
											const { default: Content } = await page.compile(person.description);

											return (
												<li>
													<article class="grid grid-cols-[auto_1fr] gap-x-8">
														<Image
															alt=""
															class="size-32 rounded-full object-contain"
															src={getImageImport(person.image)}
														/>
														<div class="grid gap-y-2">
															<h3 class="text-lg font-medium">{person.name}</h3>
															{isNonEmptyArray(person.links) ? (
																<dl class="my-3 flex flex-wrap items-center gap-x-4 gap-y-1 text-sm font-medium text-neutral-500">
																	{person.links.map((link) => {
																		const icon = icons[link.kind];

																		return (
																			<div>
																				<dt class="sr-only">{icon.label}</dt>
																				<dd>
																					<a
																						class="flex items-center gap-x-1.5 transition hover:text-neutral-950"
																						href={link.href}
																					>
																						<Icon
																							aria-hidden="true"
																							class="size-5 shrink-0"
																							name={icon.icon}
																						/>
																						<span>{icon.label}</span>
																					</a>
																				</dd>
																			</div>
																		);
																	})}
																</dl>
															) : null}
															<div class="prose">
																<Content />
															</div>
														</div>
													</article>
												</li>
											);
										})}
									</ul>
								</section>
							) : null}
						</div>
					) : null
				}
			</PageCard>
		</PageSection>
	</MainContent>
</PageLayout>
